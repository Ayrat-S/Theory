
Тестировщик с нуля / Урок 6 / Виды тестирования:
https://www.youtube.com/watch?v=Ee4WAVlxDq0


Software Testing - Base Course (Svyatoslav Kulikov) - 3rd edition - RU:
2.3. Виды и направления тестирования - 64стр

2.3. ВИДЫ И НАПРАВЛЕНИЯ ТЕСТИРОВАНИЯ. . . . . . . . . . . . . . . . . . . . . . . 64
2.3.1. Упрощённая классификация тестирования. . . . . . . . . . . . . . . . . . . 64
2.3.2. Подробная классификация тестирования . . . . . . . . . . . . . . . . . . . 66
2.3.2.1. Схема классификации тестирования. . . . . . . . . . . . . . . . . . . .  66
2.3.2.2. Классификация по запуску кода на исполнение. . . . . . . . . . . . . . . 70
2.3.2.3. Классификация по доступу к коду и архитектуре приложения . . . . . . . . 70
2.3.2.4. Классификация по степени автоматизации . . . . . . . . . . . . . . . . . 72
2.3.2.5. Классификация по уровню детализации приложения
 (по уровню тестирования) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
2.3.2.6. Классификация по (убыванию) степени важности тестируемых функций
 (по уровню функционального тестирования). . . . . . . . . . . . .. . . . . . . . 76
4
2.3.2.7. Классификация по принципам работы с приложением . . . . . . . . . . . . .79
2.3.2.8. Классификация по природе приложения . . . . . . . . . . . . . . . . . . .80
2.3.2.9. Классификация по фокусировке на уровне архитектуры приложения. . . . . . 80
2.3.2.10. Классификация по привлечению конечных пользователей . . . . . . . . . . 81
2.3.2.11. Классификация по степени формализации . . . . . . . . . . . . . . . . . 81
2.3.2.12. Классификация по целям и задачам. . . . . . . . . . . . . . . . . . . . 82
2.3.2.13. Классификация по техникам и подходам . . . . . . . . . . . . . . . . . .90
2.3.2.14. Классификация по моменту выполнения (хронологии). . . . . . . . . . . . 98
2.3.3. Альтернативные и дополнительные классификации тестирования . . . . . . . . 100
2.3.4. Классификация по принадлежности к тестированию по методу белого
 и чёрного ящиков. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .107


ТЕМА:
2.3.1. Упрощённая классификация тестирования

	Тестирование можно классифицировать по очень большому количеству признаков, и практически в каждой серьёзной книге о тестировании автор показывает свой (безусловно имеющий право на существование) взгляд на этот вопрос.
	Соответствующий материал достаточно объёмен и сложен, а глубокое понимание каждого пункта в классификации требует определённого опыта, потому мы разделим данную тему на две: сейчас мы рассмотрим самый простой, минимальный набор информации, необходимый начинающему тестировщику, а в следующей главе приведём подробную классификацию.


Рисунок 2.3.a — Упрощённая классификация тестирования

* По запуску кода на исполнение:
 	Статическое тестирование - без запуска.
	Динамическое тестирование - с запуском.

* По доступу к коду и архитектуре приложения:
	Метод белого ящика - доступ коду есть.
	Метод черного ящика - доступа к коду нет.
	Метод серго ящика - к чати кода доступ есть, к части нет.

* По уровню детализации приложения (по уровню тестирования):
	Ручное тесирование - тест-кейсы выполняет человек.
	Автоматизированное тестирование - тест-кейсы частично или полностью выполняет специальное инструментальное средство.

* По уровню детализации приложения (по уровню тестирования):
	Модульное (компонентное) тестирование - проверяются отдельные небольшие части приложения.
	Интеграционное тестирование - проверяется взаимодействие между несколькими частями приложения.
	Системное тестирование - приложение проверяется как единое целое.

* По (убыванию) степени важности теструемых функций (по уровню функционального тестирования):
	Дымовое тестирование - тестирование самой важной, ключевой функциональности, неработоспособность которой делает бессмысленной саму идею использования приложения.
	Тестирование критического пути - проверка функциональности, используемой типичными пользователями в типичной повседневной деятельности.
	Расширенное тестирование - проверка всей (остальной) функциональности, заявленной в требованиях.

* По принципам работы с приложением:
	Позитивное тестирование - это тестирование, где все действия с приложением производятся строго по инструкции без отклонений, т.е. образно говоря в тепличных условиях.
	Негативное тестирование - это когда с приложением производятся некорректные действия и с некорректными данными, потенциально приводящими к ошибкам (классика жанра - деление на ноль). Будет ошибочным мнением, если думать, что негативные тесты делаются для того, что приложение не выдает ошибок. Наоборот, негативный тест делается для того, чтобы убедиться, что приложение правильно отработает даже в самых критических ситуациях (например при делении на ноль приложение должно вывести ошибку "Делить на ноль запрещено"). 

Коротко говоря, можно сделать себе заметку с тегами по данной классификации:
- Запуск кода.
- Доступ к коду.
- Автоматизация.
- Детализация.
- Важность.
- Принцип.






Упрощенная классификация тестирования.

1. По запуску кода на исполнение.
	1.1. Статический - тестирование происходит без запуска приложения.
	1.2. Динамический - тестирование происходит с запуском приложения.

2. По уровню доступа к коду.
	2.1. Метод белого ящика - доступ к исходному коду есть.
	2.2. Метод черного ящика - доступ к сиходному коду отсутвствует.
	2.3. Метод серого ящика - доступ к исходному коду есть частично.

3. По степени автоматизации.
	3.1. Ручное тестирование.
	3.2. Автоматизированное тестирование.

4. По уровню детализации приложения.
	4.1. Модульное тестирование - тестируется отдельня часть приложения.
	4.2. Интеграционное тестирование - тестируется взаимодействие между несколькими частями приложения.
	4.3. Системное тестирование - тестируется приложение как единое целое.

5. По степени важности тестируемой функциональности.
	5.1. Дымовое тестирование - тестируется самая важная, самая ключевая часть приложения, неработоспособность которой делает бессмысленным саму идею использования приложения.
	5.2. Критического пути - проверка той функциональности, которая используется в типичной повседневной деятельности, типичными пользователями.
	5.3. Расширенное тестирование - тетсирование остальной функциональности приложения, прописанной в требованиях.

6. По принципу тестирования.
	6.1. Позитивное - тестирование производится исключительно по инструкции и без отклонений, образно говоря в песочнице.
	6.2. Негативное - тестирование производится с заведомо неправильными данными и отклонениями, чтобы проверить, насколько приложение правильно работает даже в самых критических ситуациях.





























































































































