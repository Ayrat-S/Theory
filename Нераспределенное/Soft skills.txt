Леша Маршал
6 вещей, которые выдают плохого тестировщика
https://www.youtube.com/watch?v=OUhi9qQe1jU



1) Перебивание собеседника - показатель лишней уверенности в себе, плохое отношение к критике, отрицательно вляющей на возможность проверки на то что сам тестировщик ошибается.

2) Небрежность - выражается например в пропуске шага когда вы пишете баг репорт, не прикрепили скриншот который мог бы дополнительно показать что происходит. Т.е. нужно быть перфекционистом и делать работу до конца соблюдая все пункты свойств качественных требований (полнота, атомарность и т.д).

3) Непонимание требований, а точнее как работать с требованиями. Дело в том что довольно часто на проекте есть 
реальныеформальные прописанные требования по которым нужно работать и сверяться, и это правильно и это здорово.
Но, довольно часто, скажем не очень опытные тестировщики работают как - есть требования и по этим требованиям мы погнали, напримере логина: кириллицу, латиницу, спецсимволы, цифры и все что с этим связано, еще проверили на максимальную длину там 255 или 256 и вроде бы все хорошо, но скажем так, что отличит этого от действительно хорошего тестировщика - хороший тестировщик пойдет через пользовательские сценарии, т.е. сначала он введет логин и пароль котрый существует и войдет с ними в аккаунт, потом введет несуществующий пароль и не сможет войти. Потом попробует сделать это еще раз убедиться. Потом возьмет и нажмет на восстановление пароля - пойдет именно пользовательскими сценариями, и, через пользовательские сценарии он покроет формальные требования, скажем через матрицу трассируемости между требованиями и сценариями покроет необходимые проверки.

4) Если задать вопрос тестировщику - что нового ты узнал за последний месяц в своей профессиональной области, а он не сможет ответить. Т.е. ни в коем случае нельзя допускать застой, как будто все окей и так пока все знаю все хорошо. Тестировщику нужно развиваться прямо постоянно.

5) Документация - тестировщик не сверяет версию документов с которыми работает. На примере требований что может произойти.
Вы получили первую версию требований и начали готовить по ним сценарии: подготовили сценарий, запустили прогон - прошли его, написали отчет и вроде бы все ок, но за это время требования изменились пару раз, такое бывает, не сверялись ни разу и даже не знает об этом, далю резолюцию о том что софт работает и можно запускать и в это же время заказчик думает что софт работает но по другим требованиям, и получается неготовый продукт.
Нужно сверяться на этапе запуска тестового прогона что версия не изменилась, во вторых нужно серяться на этапе написания отчета что версия соответствует. Если она не соответствует - то это нужно указать как-то ну и прораотать этот момент отдельно. Но сверяться надо. Это очень классная черта хорошего тестировщика.

6) Баг репорты. Их нужно писать тогда, когда вы только нашли баг - этого делать нельзя, если вы так сделаете то это характеризует как плохого тестировщика. Дело в том что могло произойти несколько вещей:
- во первых могли несовсем правильно пройти тест кейс и баг появился именно из-за этого, как минимум нужно еще раз пройти этот сценарий и посмотреть как он работает и в идеале пройтись по документации (по тестовой сценарии есть доументации), некоторые грешат тем что проходят их на память.
В конце концов могла произойти системная проблема, например проблема с окружением на котором вы работаете, да даже элементарно мог лечь сайт, лечь сервер на какое-то время на секунду или две как раз когда вы проходили. Тут не то что нужно репорт - тут надо вовсю трубить что лег сервер надо срочно поднимать.



 











































